server:
  port: 8000

spring:
  cloud:
    gateway:
      server:
        webflux:
          routes:
            # 1. user-service 경로
            - id: user-service-route # 규칙 이름
              uri: lb://user-service # eureka 서버에 등록된 user-service에 주소로 찾아가도록 동적 설정
              predicates:
                - Path=/users/** # /users/로 시작하는 모든 요청을 잡도록 변경
              filters:
                # ★★★ 서킷 브레이커 필터 추가 ★★★
                - name: CircuitBreaker
                  args:
                    # 위에서 정의한 서킷 브레이커 인스턴스 이름
                    name: user-service-breaker
                    # 서킷이 열렸을 때(장애 발생 시) 보여줄 대체 응답 경로
                    fallbackUri: forward:/fallback/user
                # 필터는 아래 정의된 순서대로 적용

                # 1. 첫 번째 필터: AuthenticationFilter
                #    - 우리가 생성한 커스텀 필터로, 실제 서비스로 요청을 라우팅하기 전에 인증을 먼저 수행
                #    - Spring은 클래스 이름 'AuthenticationFilter'에서 'Filter'를 제외한 'Authentication'을 이름으로 자동 인식
                # - name: AuthenticationFilter 기존 필터 주석
                - name: AuthenticationHeaderFilter

                # 2. 두 번째 필터: RewritePath (경로 재작성)
                #    - 이 필터는 클라이언트가 요청한 경로를 내부 마이크로서비스가 이해할 수 있는 경로로 변경
                #    - 예를 들어, 외부에서 온 '/users/123/info' 라는 요청 경로를 내부 user-service에는 '/123/info' 로 전달해줍니다.
                #    - 이렇게 하면 user-service는 불필요한 '/users' 접두사를 신경 쓸 필요가 없어집니다.
                - name: RewritePath
                  args:
                    regexp: /users/(?<segment>.*)
                    replacement: /$\{segment}
            # 2. coupon-service 경로
            - id: coupon-service-route
              uri: lb://coupon-service # 유레카에 등록된 서비스 이름
              predicates:
                - Path=/coupons/** # /coupons/로 시작하는 모든 요청
              filters:
                - name: AuthenticationHeaderFilter
                - name: RewritePath
                  args:
                    regexp: /coupons/(?<segment>.*)
                    replacement: /$\{segment}
            # 3. ★★★ 신규 order-service 라우트 추가 ★★★
            - id: order-service-route
              uri: lb://order-service # 유레카에 등록된 서비스 이름
              predicates:
                - Path=/orders/** # /orders/로 시작하는 모든 요청
              filters:
                # ★★★ 인증 필터 적용 ★★★
                # 주문 생성은 당연히 인증된 사용자만 가능해야 함
                - name: AuthenticationHeaderFilter

                # ★★★ 경로 재작성 ★★★
                # /orders/user/... -> /user/...
                - name: RewritePath
                  args:
                    regexp: /orders/(?<segment>.*)
                    replacement: /$\{segment}

# Resilience4j 서킷 브레이커 설정
resilience4j.circuitbreaker:
  configs:
    default:
      # 최소 표본 수: 5건 모이기 전에는 실패율/느린호출율 평가(OPEN 전환 판단) 자체를 하지 않음
      minimum-number-of-calls: 5
      # 실패율 임계값(%): 최근 COUNT_BASED 기본 슬라이딩 윈도(기본 크기 100) 내 실패 비율이 50% 초과하면
      failure-rate-threshold: 50
      # OPEN(서킷이 열려 외부 서비스 호출 차단) 지속 시간: OPEN → 10초 경과 후 HALF_OPEN 전환
      wait-duration-in-open-state: 10s
      # 느린 호출 비율 임계값(%): 느린 호출(아래 임계시간 초과)이 윈도 내 60% 초과하면 역시 OPEN
      slow-call-rate-threshold: 60
      # 느린 호출 판정 기준: 2초 이상 소요되면 '느린 호출'로 집계 (실패와 별도 지표)
      slow-call-duration-threshold: 2s
  instances:
    # 이 서킷 브레이커의 고유 이름
    user-service-breaker:
      # 위에서 정의한 'default' 설정을 상속받아 사용
      base-config: default

# ★★★ JWT 비밀키 추가 (user-service와 동일해야 함) ★★★
token:
  secret: this-is-my-new-super-strong-secret-key-for-our-msa-project-!@#